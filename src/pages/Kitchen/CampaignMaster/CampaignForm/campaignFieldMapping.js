import { omit } from "lodash";

export const FIELD_TYPES = {
  doubleInput: "double_input",
  singleInputNumeric: "single_input_numeric",
  singleInput: "single_input",
  checkBoxList: "checkbox_list",
  default: "single_input",
};

export const BOOLEAN_FIELD_ATTRIBUTES = { availability: "In Stock", identifier_exists: "Yes", include_in_feed: "Yes" };
export const ACTUAL_FIELD_ATTRIBUTES = {
  availability: {
    true: "In Stock",
    false: "Out of Stock",
  },
  identifier_exists: {
    true: "Yes",
    false: "No",
  },
  include_in_feed: {
    true: "Yes",
    false: "No",
  },
};

export const CAMPAIGN_FIELD_MAPPING = [
  {
    attributes: [
      "product_id",
      "name",
      "google_product_category",
      "brand_name",
      "group_id",
      "description",
      "product_url",
      "currency",
      "loyalty_points",
      "gtin",
      "mpn",
      "promotion",
      "product_image_url",
    ],
    type: FIELD_TYPES.singleInput,
    API: false,
  },
  {
    attributes: ["purchase_price", "listprice", "mrp"],
    type: FIELD_TYPES.doubleInput,
    API: false,
  },
  {
    attributes: ["availability"],
    type: FIELD_TYPES.checkBoxList,
    API: false,
    options: [
      {
        id: 1,
        value: "in stock",
        label: "In Stock",
        name: "In Stock",
      },
      {
        id: 2,
        value: "out of stock",
        label: "Out of Stock",
        name: "Out of Stock",
      },
    ],
  },
  {
    attributes: ["identifier_exists"],
    type: FIELD_TYPES.checkBoxList,
    API: false,
    options: [
      {
        id: 1,
        value: true,
        label: "Yes",
        name: "Yes",
      },
      {
        id: 2,
        value: false,
        label: "No",
        name: "No",
      },
    ],
  },
  {
    attributes: ["include_in_feed"],
    type: FIELD_TYPES.checkBoxList,
    API: false,
    options: [
      {
        id: 1,
        value: "Yes",
        label: "Yes",
        name: "Yes",
      },
      {
        id: 2,
        value: "No",
        label: "No",
        name: "No",
      },
    ],
  },
  {
    attributes: ["shipping_modes"],
    type: FIELD_TYPES.checkBoxList,
    API: true,
    options: [],
    url: "/shippingmethods",
    key: "",
    source: "shippingList",
  },
  {
    attributes: ["p_recipient"],
    type: FIELD_TYPES.checkBoxList,
    API: true,
    options: [],
    key: "R",
    source: "recipientList",
  },
  {
    attributes: ["p_occasion"],
    type: FIELD_TYPES.checkBoxList,
    API: true,
    options: [],
    key: "O",
    source: "occasionList",
  },
  {
    attributes: ["city"],
    type: FIELD_TYPES.checkBoxList,
    API: true,
    options: [],
    key: "C",
    source: "cityList",
  },
  {
    attributes: ["primary_product_type"],
    type: FIELD_TYPES.checkBoxList,
    API: true,
    options: [],
    key: "PT",
    source: "productTypeList",
  },
];

/**
 * @function getUniqId to get unit id.
 * @returns {string} returns unique id generated by date function
 */
export const getUniqId = () => parseFloat(`${Date.now()}${Math.floor(Math.random() * 100 + 1)}`);
export const OR = { orId: getUniqId(), fieldId: "", fieldName: "", fieldOperand: "", fieldOperator: "" };
export const AND = { andId: getUniqId(), orConditions: [{ ...OR }] };
export const OMIT_KEYS = [
  "attribute",
  "attributeList",
  "cityList",
  "currencyId",
  "currencyList",
  "disableRepeat",
  "disableTime",
  "domainList",
  "geoList",
  "occasionList",
  "operator",
  "operatorList",
  "publisherList",
  "recipientList",
  "productTypeList",
  "shippingList",
  "repeatOptions",
  "type",
  "fieldName",
  "orId",
  "toValue",
  "fromValue",
];

/**
 * @function getBooleanFieldValues to get boolean operand fields.
 * @param {object} orCondition condition of filter
 * @returns {object} returns updated object filter
 */
export const getBooleanFieldValues = (orCondition) => {
  const booleanValues = orCondition?.fieldOperand.map((val) =>
    [...Object.values(BOOLEAN_FIELD_ATTRIBUTES)].includes(val),
  );
  return {
    ...omit(orCondition, [...OMIT_KEYS, "orId"]),
    fieldName: orCondition.fieldName,
    fieldOperand: booleanValues.join(", "),
  };
};

/**
 * @function mapBooleanFieldValues to get actual operand fields for boolean values.
 * @param {object} orCondition condition of filter
 * @returns {object} returns updated object filter
 */
export const mapBooleanFieldValues = (orCondition) => {
  const actualValues = orCondition?.fieldOperand.map((value) => {
    if (["true", "false"].includes(value)) {
      return ACTUAL_FIELD_ATTRIBUTES[orCondition.fieldName][value];
    }
    return value;
  });
  return {
    ...orCondition,
    fieldName: orCondition.fieldName,
    fieldOperand: [...actualValues],
  };
};

/**
 * @function updateTagList to update recipient tag name.
 * @param {object|string} value tag value
 * @param {object} parentForm form reference
 * @param {string} operatorListSource source to set operator List
 * @param {Array} list list of recipient
 */
export const updateTagList = (value, parentForm, operatorListSource, list = []) => {
  let listOfTags = [...list];
  const tagKey = value?.key || "";
  listOfTags = listOfTags.map((recipient) => ({
    id: recipient.tagId,
    name: recipient.tagName,
    ...(tagKey === "R" && {
      label: recipient.tagName.toString().replace(/for\s/gi, "").trim(),
    }),
  }));
  if (value?.source) {
    parentForm.mutators.setTagList(value.source, listOfTags);
    parentForm.mutators.setOperatorList(operatorListSource, listOfTags);
  } else {
    parentForm.mutators.setDomainList(listOfTags);
  }
};
