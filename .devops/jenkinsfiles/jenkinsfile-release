def VERSION
def TAG
pipeline {

    environment {
        DOCKER_REPOSITORY_URI = '811454692736.dkr.ecr.ap-south-1.amazonaws.com/revvit2/release/zeus-frontend'
        registryCredentialId = 'ecr:ap-south-1:ecr-cred'

    }

    agent {label "${AGENT}"}

    stages {
    stage('Deploy to QA') {
            steps {
               script{
                if (params.ENV == 'qa') { 
                    if (params.Version == '') {       
                
                        
                        echo 'Cloning Git Repo'

                            sh '''
                            git clone git@git.fnp.com:revvit2/zeus-frontend.git && cd zeus-frontend
                            REL="$(git for-each-ref --sort=-committerdate | awk '{ print $3 }' | cut -d '/' -f 4,5 | grep ^${BRANCH} | head -n 1)"
                            echo "Checking out branch ${REL}"
                            echo REL=\\"${REL}\\" > /tmp/cicd.txt
                            '''
                            load "/tmp/cicd.txt"
                            git branch: "${REL}" ,
                            url: 'git@git.fnp.com:revvit2/zeus-frontend.git'

                            sh '''
                            
                            VERSION=`grep -e 'version":' package.json | awk '{print \$2}' | tr -d '"\' | tr -d ',\' `
                            eval echo "VERSION=\$VERSION" > version.ini
                            echo $VERSION
                            '''
                            
                    
                            sh '''
                              echo "npm build"
                              node -v
                              npm -v
                              npm install
                              npm run build
              
                            ''' 

                        echo 'Build & push Docker image'

                            withDockerRegistry(credentialsId: 'ecr:ap-south-1:ecr-cred', url: 'https://811454692736.dkr.ecr.ap-south-1.amazonaws.com') {

                            sh """
                            source version.ini
                            echo $VERSION
                            GIT_COMMIT_ID="\$(echo \$(git rev-parse HEAD) | cut -c 1-7)"
                            TIMESTAMP=\$(date +'%Y%m%d.%H%M')
                            export TAG_NAME=v-\$VERSION-\$TIMESTAMP-\$GIT_COMMIT_ID
                            export TAG=v-\$VERSION
                            IMG_NAME="\$DOCKER_REPOSITORY_URI:\$TAG_NAME"
                            IMAGE="\$DOCKER_REPOSITORY_URI:\$TAG"
                            docker build -t "\$IMG_NAME" .
                            docker tag \$IMG_NAME \$IMAGE
                            docker push "\$IMG_NAME"
                            docker push "\$IMAGE"
                            echo "TAG_NAME=\$TAG_NAME" > tagname.ini
                            docker rmi -f \$IMG_NAME
                            docker rmi -f \$IMAGE
                            """
                            }

                        echo 'Deploy To QA'
                          dir('devops') {
                            sh ''' 

                              git clone git@git.fnp.com:devops/devops.git && cd devops
                              DEV_REL="$(git for-each-ref --sort=-committerdate | awk '{ print $3 }' | cut -d '/' -f 4,5 | grep ^${DEVOPS_BRANCH} | head -n 1)"
                              echo "Checking out branch ${DEV_REL}"
                              echo DEV_REL=\\"${DEV_REL}\\" >> /tmp/devopscicd.txt'''
                      
                              load "/tmp/devopscicd.txt"
                              git branch: "${DEV_REL}",
                              url: 'git@git.fnp.com:devops/devops.git'
                            }

                            withCredentials([file(credentialsId: "qa-kubeconfig", variable: 'KUBECONFIG')]) {

                            def ENV = params.ENV
                            sh '''
                            source $WORKSPACE/tagname.ini
                            helm upgrade --install zeus-frontend -f $WORKSPACE/devops/environment-values/$ENV/zeus-frontend.yaml --set image.tag=$TAG_NAME $WORKSPACE/.devops/helm-charts/zeus-frontend
                            source version.ini
                            helm repo add private s3://fnp-helm-charts/charts/
                            cd $WORKSPACE/.devops/helm-charts
                            helm package zeus-frontend --app-version $TAG_NAME --version $VERSION
                            helm s3 push --force --relative zeus-frontend-$VERSION.tgz private
                            '''
                            }
                    }
                    else {

                        dir('devops') {
                        sh ''' 

                              git clone git@git.fnp.com:devops/devops.git && cd devops
                              DEV_REL="$(git for-each-ref --sort=-committerdate | awk '{ print $3 }' | cut -d '/' -f 4,5 | grep ^${DEVOPS_BRANCH} | head -n 1)"
                              echo "Checking out branch ${DEV_REL}"
                              echo DEV_REL=\\"${DEV_REL}\\" >> /tmp/devopscicd.txt'''
                      
                              load "/tmp/devopscicd.txt"
                              git branch: "${DEV_REL}",
                              url: 'git@git.fnp.com:devops/devops.git'
                      }

                   withCredentials([file(credentialsId: "qa-kubeconfig", variable: 'KUBECONFIG')]) {

                      sh """

                      helm repo add private s3://fnp-helm-charts/charts/
                      helm upgrade --install zeus-frontend -f $WORKSPACE/devops/environment-values/${params.ENV}/zeus-frontend.yaml --set image.tag="${params.ImageTag}" private/zeus-frontend --version "${params.Version}"
                      """
                    }

                    }
                 }

               }
            }
        }

       stage('Deployment stage') {
            steps{
                echo "Deploying version ${params.Version} to ${params.ENV} env"
                script{
                   if ( params.ENV && params.ENV != 'qa' ) {

                      dir('devops') {
                        sh ''' 

                              git clone git@git.fnp.com:devops/devops.git && cd devops
                              DEV_REL="$(git for-each-ref --sort=-committerdate | awk '{ print $3 }' | cut -d '/' -f 4,5 | grep ^${DEVOPS_BRANCH} | head -n 1)"
                              echo "Checking out branch ${DEV_REL}"
                              echo DEV_REL=\\"${DEV_REL}\\" >> /tmp/devopscicd.txt'''
                      
                              load "/tmp/devopscicd.txt"
                              git branch: "${DEV_REL}",
                              url: 'git@git.fnp.com:devops/devops.git'
                      }

                   withCredentials([file(credentialsId: "${params.ENV}-kubeconfig", variable: 'KUBECONFIG')]) {

                      sh """

                      helm repo add private s3://fnp-helm-charts/charts/
                      helm upgrade --install zeus-frontend$SUB_ENV -f $WORKSPACE/devops/environment-values/${params.ENV}$SUB_ENV/zeus-frontend.yaml --set image.tag="${params.ImageTag}" private/zeus-frontend --version "${params.Version}"
                      """
                    }

                    }
                }
            }
        }
    }
            post {
            always {
			        emailext body: '''${SCRIPT, template="groovy-html.template"}''',
			        mimeType: 'text/html',
			        subject: "Jenkins Build ${currentBuild.currentResult} ${currentBuild.fullDisplayName}",
			        from: "noreply-jenkins@fnp.com",
			        replyTo: "noreply-jenkins@fnp.com",
			        to: "$TO_LIST",
			        recipientProviders: [
		        	[$class: 'RequesterRecipientProvider']]
            }
      }
}
